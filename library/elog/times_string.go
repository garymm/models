// Code generated by "stringer -type=Times"; DO NOT EDIT.

package elog

import (
	"errors"
	"strconv"
)

var _ = errors.New("dummy error")

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[UnknownTime-0]
	_ = x[AllTimes-1]
	_ = x[Cycle-2]
	_ = x[FastSpike-3]
	_ = x[GammaCycle-4]
	_ = x[Phase-5]
	_ = x[BetaCycle-6]
	_ = x[AlphaCycle-7]
	_ = x[ThetaCycle-8]
	_ = x[Event-9]
	_ = x[Trial-10]
	_ = x[Tick-11]
	_ = x[Sequence-12]
	_ = x[Condition-13]
	_ = x[Block-14]
	_ = x[Epoch-15]
	_ = x[Run-16]
	_ = x[Expt-17]
	_ = x[Scene-18]
	_ = x[Episode-19]
	_ = x[TimesN-20]
}

const _Times_name = "UnknownTimeAllTimesCycleFastSpikeGammaCyclePhaseBetaCycleAlphaCycleThetaCycleEventTrialTickSequenceConditionBlockEpochRunExptSceneEpisodeTimesN"

var _Times_index = [...]uint8{0, 11, 19, 24, 33, 43, 48, 57, 67, 77, 82, 87, 91, 99, 108, 113, 118, 121, 125, 130, 137, 143}

func (i Times) String() string {
	if i < 0 || i >= Times(len(_Times_index)-1) {
		return "Times(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _Times_name[_Times_index[i]:_Times_index[i+1]]
}

func (i *Times) FromString(s string) error {
	for j := 0; j < len(_Times_index)-1; j++ {
		if s == _Times_name[_Times_index[j]:_Times_index[j+1]] {
			*i = Times(j)
			return nil
		}
	}
	return errors.New("String: " + s + " is not a valid option for type: Times")
}
